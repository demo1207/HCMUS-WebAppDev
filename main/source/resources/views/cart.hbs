<div class="container">
  <div class="row">
    <div class="cart-page col-12">
      <table class="table table-cart">
        <thead>
          <tr>
            <th width="20%"><i class="d-none fa fa-pink fa-1x5 fa-check-square"></i>
              Sản phẩm</th>
            <th width="25%" class="text-center">Mô tả</th>
            <th width="15%" class="text-center d-none d-md-table-cell">Đơn giá</th>
            <th width="15%" class="text-center d-none d-md-table-cell">Số lượng</th>
            <th width="15%" class="text-center d-none d-md-table-cell">Tổng</th>
            <th width="10%" class="text-center d-none d-md-table-cell">Thao tác</th>
          </tr>
        </thead>
        <tbody>
          {{#each accBuyer.cart}}
          <tr class="cart-item" data-psid="{{this.id_product}}">
            <td class="cart-img">
              <div class="d-flex align-items-center">
                <i class="d-none fa fa-pink fa-1x5 fa-check-square"></i>
                <a href="/product/{{this.id_product._id}}" title="{{this.id_product.name}}">
                  <img data-sizes="auto" class="lazyautosizes ls-is-cached lazyloaded"
                    src="{{accessArr this.id_product.image 0}}"
                    data-src="https://pos.nvncdn.com/cba2a3-7534/ps/20231214_XgJjLAqGgu.jpeg"
                    alt="Mũ len Red and white big knitting cục bông Xmas - Đỏ" sizes="105px" />
                </a>
              </div>
            </td>
            <td class="text-center">
              <a href="/mu-len-red-and-white-big-knitting-cuc-bong-xmas-do-p{{this.id_product}}.html"
                title="Mũ len Red and white big knitting cục bông Xmas - Đỏ">
                {{this.id_product.name}}
              </a>
              <div class="d-block d-md-none">
                <p>
                  <strong class="d-block product-price">{{this.id_product.price}}</strong>
                </p>
                <p>
                </p>
                <div class="blk-qty d-flex justify-content-center align-items-center">
                  <div data-label="cart" class="blk-qty-btn minus d-flex justify-content-center align-items-center"
                    data-id="{{this.id_product._id}}">-
                  </div>
                  <input
                    class="updateCart blk-qty-input d-flex justify-content-center align-items-center product-quantity"
                    type="text" data-psid="{{this.id_product}}" max="22" min="1" value="1" style="margin-bottom: 0;" />
                  <div data-label="cart" class="blk-qty-btn plus d-flex justify-content-center align-items-center"
                    data-id="{{this.id_product._id}}">+
                  </div>
                </div>
                <p></p>
                <p>
                  <strong>{{calculateTotalPrice
                    this.id_product.price
                    this.quantity
                    }}</strong>
                </p>
                <a class="remove-cart" href="javascript:void(0)" data-psid="{{this.id_product}}">Xóa</a>
              </div>
            </td>
            <td class="text-center d-none d-md-table-cell">
              <strong class="d-block product-price">{{formatPrice this.id_product.price}}</strong>
            </td>
            <td class="text-center d-none d-md-table-cell">
              <div class="blk-qty d-flex justify-content-center align-items-center">
                <div data-label="cart" class="blk-qty-btn minus d-flex justify-content-center align-items-center"
                  data-id="{{this.id_product._id}}">-
                </div>
                <input
                  class="updateCart blk-qty-input d-flex justify-content-center align-items-center product-quantity"
                  type="text" data-psid="{{this.id_product}}" max="22" min="1" value="{{this.quantity}}" />
                <div data-label="cart" class="blk-qty-btn plus d-flex justify-content-center align-items-center"
                  data-id="{{this.id_product._id}}">+</div>
              </div>
            </td>
            <td class="text-center d-none d-md-table-cell">
              <strong class="products-price">{{formatPrice (calculateTotalPrice
                this.id_product.price
                this.quantity)
                }}</strong>
            </td>
            <td class="text-center d-none d-md-table-cell">
              <a class="remove-cart" href="javascript:void(0)" data-psid="{{this.id_product}}"
                data-id="{{this.id_product._id}}">Xóa</a>
            </td>
          </tr>
          {{/each}}
        </tbody>
      </table>
      <div class="note">
        <p>Hỗ trợ ship 20k cho đơn hàng từ 300k khu vực nội thành HN, HCM</p>
        <p>Hỗ trợ ship 30k cho đơn hàng từ 500k các khu vực khác</p>
        <p>Lưu ý:</p>
        <p>Đơn hàng trên website được xử lý trong giờ hành chính</p>
      </div>
      <div class="cart-total text-end">
        <div class="total d-block">Tổng: 1.245.000<sub>đ</sub></div>
        <div class="clearfix"></div>

        <a class="btn btn-lg btn-pink btn-radius" href="/product"
          style="height: 4.5rem; width: 18rem; font-size: 2rem; text-align:center; border-radius: 50px;">Tiếp tục mua
          sắm</a>
        {{#if accBuyer.cart.length}}
        <a class="payment-btn btn btn-lg btn-outline-pink btn-radius" href="/payment"
          style="height: 4.5rem; width: 13.5rem; font-size: 2rem; text-align:center">Thanh toán</a>
        {{/if}}
      </div>
    </div>
  </div>
</div>


{{!-- <script src="/js/cart.js"></script> --}}

<script>
    document.addEventListener("DOMContentLoaded", function () {
  calculateTotal();
  const removeCartButtons = document.querySelectorAll(".remove-cart");
  const quantityButtons = document.querySelectorAll(".blk-qty-btn");
  quantityButtons.forEach((button) => {
    button.addEventListener("click", function (e) {
      const quantityInput = this.parentNode.querySelector(".product-quantity");
      let currentQuantity = parseInt(quantityInput.value, 10);
      const productId = this.getAttribute("data-id");

      // Check if it's a plus or minus button and update the quantity
      if (this.classList.contains("plus")) {
        currentQuantity++;
      } else if (this.classList.contains("minus")) {
        currentQuantity = currentQuantity > 1 ? currentQuantity - 1 : 1;
      }

      quantityInput.value = currentQuantity;
      updateQuantityInCart(productId, currentQuantity);

      // Now, update the total price for this item
      const priceElement =
        this.closest(".cart-item").querySelector(".product-price");
      const price =
        parseFloat(
          priceElement.innerText.replace(/\./g, "")
        ) || 0;
      const totalPriceElement =
        this.closest(".cart-item").querySelector(".products-price");
      totalPriceElement.innerText = formatPrice (calculateTotalPrice(price, currentQuantity)) + " đ";
    });
  });

  removeCartButtons.forEach((button) => {
    button.addEventListener("click", function (e) {
      e.preventDefault();
      const productId = this.getAttribute("data-id");
      deleteProductFromCart(productId, this);
    });
  });
});

function updateQuantityInCart(productId, newQuantity) {
  fetch("/product/cart/update", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({ productId, newQuantity }),
  })
    .then((response) => response.json())
    .then((data) => {
      console.log("before success");
      console.log("Success:", data);
      const cartNumber = data.reduce(
        (accum, product) => accum + product.quantity,
        0
      );
      document.getElementById("lblCartCount").innerText = `${cartNumber}`;
      //updateCartUI(productId, newQuantity);
      calculateTotal(); // Tính toán lại tổng giá trị đơn hàng
    })
    .catch((error) => {
      console.error("Error:", error);
    });
}

async function deleteProductFromCart(productId, buttonElement) {
  try {
    const response = await fetch(`/product/cart/${productId}`, {
      method: "DELETE",
    });

    if (response.ok) {
      const data = await response.json();
      // Xử lý dữ liệu JSON trả về từ server
      buttonElement.closest(".cart-item").remove();

      //let data = await res.json();
      const cartNumber = data.reduce(
        (accum, product) => accum + product.quantity,
        0
      );
      document.getElementById("lblCartCount").innerText = `${cartNumber}`;

      calculateTotal();
      // Cập nhật thông tin giỏ hàng nếu cần
      // Thêm đoạn mã này để xóa nút "Thanh toán"
      if (cartNumber === 0) {
        // Tìm nút "Thanh toán" và xóa hoặc ẩn nó
        const paymentButton = document.querySelector('.payment-btn');
        if (paymentButton) {
          paymentButton.remove(); // hoặc paymentButton.style.display = 'none'; để ẩn nút
        }
      }
    } else {
      // Kiểm tra nếu phản hồi không phải là JSON
      if (response.headers.get("content-type").includes("application/json")) {
        const errorData = await response.json();
        console.error(
          "Error when deleting product from cart",
          errorData.message
        );
        alert("Lỗi khi xóa sản phẩm khỏi giỏ hàng: " + errorData.message);
      } else {
        console.error("Unexpected response from server");
        alert("Lỗi không mong đợi từ server.");
      }
    }
  } catch (error) {
    console.error(
      "There was an error deleting the product from the cart",
      error
    );
    alert("Có lỗi xảy ra khi xóa sản phẩm: " + error.message);
  }
}

function calculateTotal() {
  let total = 0;

  const cartItems = document.querySelectorAll(".cart-item");

  cartItems.forEach((item) => {
    const priceText = item
      .querySelector(".products-price")
      .innerText.replace(/\./g, "");
    const quantityText = item.querySelector(".product-quantity").value; // hoặc innerText, tuỳ thuộc vào cấu trúc

    const price = parseFloat(priceText) || 0;
    const quantity = parseInt(quantityText, 10) || 0;
    console.log(quantity);

    total += price;
    console.log(total);
  });

  document.querySelector(".total").innerHTML = `Tổng: ${formatPrice(
    total
  )} đ`;
}

// Hàm formatPrice để định dạng số theo dạng tiền tệ
function formatPrice(price) {
  return price.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ".");
}

function calculateTotalPrice(price, quantity) {
  return price * quantity;
}

</script>
